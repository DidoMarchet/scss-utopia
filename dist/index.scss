@use "sass:list";
@use "sass:meta";
@use "sass:map";
@use "sass:string";

/// https://hugogiraudel.com/2013/10/09/advanced-sass-list-functions-again/

@function remove-duplicates($list, $recursive: false) {  
  $result: ();  
  @each $item in $list {    
    @if not index($result, $item) {      
      @if length($item) > 1 and $recursive {        
        $result: append($result, remove-duplicates($item, $recursive));      
      } @else {        
        $result: append($result, $item);      
      }    
    }  
  }  
  @return $result;
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}
$defaults: (
  "small": (min-width: 320px), 
  "medium": (min-width: 750px),
  "large": (min-width: 1000px),
  "xlarge": (min-width: 1300px),
  "pointer": (pointer: fine) and (hover: hover),
  "touch": (pointer: coarse) and (hover: none)
);

$breakpoints: ()!default;
/// Original mixins https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints

@mixin react($breakpoint) {
  $merged: map.merge($defaults, $breakpoints);
  @if map.has-key($merged, $breakpoint) {
    @media #{meta.inspect(map.get($merged, $breakpoint))} {
      @content;
    }
  }
  @else {
    @warn "No value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map.keys(map.merge($defaults, $breakpoints))}.";
  }
}

/// Create responsive rules based on breakpoints
/// @author Davide Marchet
/// @param {List} $properties - Key:value list, name is required ('name': 'css property', 'small': value, medium: value, [...])
/// @require react

@mixin resp($properties...) {
  $breakpointsList: ();

  @each $property in $properties {
      $brekpoints: map.remove($property, 'name');
      @each $brekpoint in map.keys($brekpoints) {
        $breakpointsList: list.append($breakpointsList, $brekpoint, $separator: comma);
      }
  }

  $breakpointsList: remove-duplicates($breakpointsList);

  @each $breakpoint in $breakpointsList {
    @include react(#{$breakpoint}){
      @each $property in $properties {
        @if map.has-key($property, 'name') {
          @if map.has-key($property, $breakpoint) {
            #{map.get($property, 'name')}: #{map.get($property, $breakpoint)};
          }
        }
        @else {
          @error "Property 'name' is required.";
        }
      }
    }
  }
}

/// Inspired by https://www.bronco.co.uk/our-ideas/creating-a-clamp-fallback-function-in-sass-scss/
/// Create clamp rules and fallback for old browser
/// @author Davide Marchet
/// @param {String} $property - Css property name
/// @param {List} $sizes - Clamp values (min scaler max, min scaler max, [...])

@mixin fluid($property, $sizes...) {
  $staticValues: ();
  $minMaxValues: ();
  $clampValues: ();
  @if list.length($sizes) <= 4 {
    @each $size in $sizes {
      $values: ();
  
      @each $value in $size {
        $values: list.append($values, $value, $separator: comma);
      }
      $staticValues: list.append($staticValues, #{list.nth($values, 3)});
      $minMaxValues: list.append($minMaxValues, min(max(#{list.nth($values, 1)}, #{list.nth($values, 2)}), #{list.nth($values, 3)}));
      $clampValues: list.append($clampValues, clamp(#{$values}));
    }
  
    #{$property}: $staticValues;
    #{$property}: $minMaxValues;
    #{$property}: $clampValues;
  }
  @else {
    @error "Sizes must be <= 4";
  }
  
}

/// Create static rule
/// @author Davide Marchet
/// @param {String} $class - Class name
/// @param {String} $property - Css property name
/// @param {List} $sizes - Static values (10, 25, 40, [...])
/// @param {String} $unit -  Unit

@mixin static($class, $property, $sizes, $unit: 'px') {
  @each $size in $sizes {
    .#{$class}-#{str-replace(#{$size}, '.', $replace: '-')} {
      #{$property}: #{$size}#{$unit};
    }
  }
}
